{"ast":null,"code":"import { Subject } from 'rxjs'; // read on rxjs\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass PostService {\n  constructor(http) {\n    this.http = http;\n    this.posts = [];\n    this.postsUpdated = new Subject();\n  }\n  getPosts() {\n    this.http.get('http://localhost:3000/api/posts').pipe(map(postData => {\n      return postData.posts.map(post => {\n        return {\n          title: post.title,\n          content: post.content,\n          id: post._id\n        };\n      });\n    })).subscribe(transformedPosts => {\n      this.posts = transformedPosts;\n      this.postsUpdated.next([...this.posts]);\n    });\n  }\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n  addPost(title, content) {\n    const post = {\n      id: null,\n      title: title,\n      content: content\n    };\n    this.http.post('http://localhost:3000/api/posts', post).subscribe(responseData => {\n      console.log(responseData.message);\n      this.posts.push(post);\n      this.postsUpdated.next([...this.posts]);\n    });\n  }\n  deletePost(postId) {\n    this.http.delete('http://localhost:3000/api/posts' + postId).subscribe(() => {\n      console.log(\"Deleted\");\n    });\n  }\n}\nPostService.ɵfac = function PostService_Factory(t) {\n  return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n};\nPostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostService,\n  factory: PostService.ɵfac,\n  providedIn: 'root'\n});\nexport { PostService };","map":{"version":3,"names":["Subject","map","PostService","constructor","http","posts","postsUpdated","getPosts","get","pipe","postData","post","title","content","id","_id","subscribe","transformedPosts","next","getPostUpdateListener","asObservable","addPost","responseData","console","log","message","push","deletePost","postId","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Saurab Dhir\\Documents\\Web Dev Udemy Course\\Angular Course\\mean-course\\src\\app\\posts\\posts.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Subject } from 'rxjs'  // read on rxjs\r\nimport { Post } from \"./post.model\";\r\nimport {HttpClient} from '@angular/common/http'\r\nimport { map } from 'rxjs/operators'\r\n\r\n@Injectable({providedIn:'root'})\r\n\r\nexport class PostService {\r\n  private posts: Post[] = [];\r\n  private postsUpdated = new Subject<Post[]>();\r\n\r\n  constructor(private http: HttpClient) {\r\n\r\n  }\r\n\r\n  getPosts(){\r\n     this.http.get<{message: string, posts: any}>('http://localhost:3000/api/posts')\r\n     .pipe(map((postData) => {\r\n      return postData.posts.map(post => {\r\n        return {\r\n          title: post.title,\r\n          content: post.content,\r\n          id: post._id\r\n        }\r\n      });\r\n     }))\r\n     .subscribe((transformedPosts) =>{\r\n      this.posts = transformedPosts;\r\n      this.postsUpdated.next([...this.posts])\r\n     });\r\n  }\r\n\r\n  getPostUpdateListener(){\r\n    return this.postsUpdated.asObservable();\r\n  }\r\n\r\n  addPost(title: string, content: string) {\r\n     const post: Post = { id:null, title: title, content: content };\r\n     this.http.post<{message: string}>('http://localhost:3000/api/posts', post).subscribe((responseData) =>{\r\n      console.log(responseData.message)\r\n      this.posts.push(post);\r\n      this.postsUpdated.next([...this.posts]);\r\n     });\r\n\r\n  }\r\n\r\n  deletePost(postId: string){\r\n    this.http.delete('http://localhost:3000/api/posts' + postId)\r\n    .subscribe(() => {\r\n      console.log(\"Deleted\");\r\n    })\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM,EAAE;AAGhC,SAASC,GAAG,QAAQ,gBAAgB;;;AAEpC,MAEaC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,YAAY,GAAG,IAAIN,OAAO,EAAU;EAI5C;EAEAO,QAAQA,CAAA;IACL,IAAI,CAACH,IAAI,CAACI,GAAG,CAAgC,iCAAiC,CAAC,CAC9EC,IAAI,CAACR,GAAG,CAAES,QAAQ,IAAI;MACtB,OAAOA,QAAQ,CAACL,KAAK,CAACJ,GAAG,CAACU,IAAI,IAAG;QAC/B,OAAO;UACLC,KAAK,EAAED,IAAI,CAACC,KAAK;UACjBC,OAAO,EAAEF,IAAI,CAACE,OAAO;UACrBC,EAAE,EAAEH,IAAI,CAACI;SACV;MACH,CAAC,CAAC;IACH,CAAC,CAAC,CAAC,CACFC,SAAS,CAAEC,gBAAgB,IAAI;MAC/B,IAAI,CAACZ,KAAK,GAAGY,gBAAgB;MAC7B,IAAI,CAACX,YAAY,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACb,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC;EACL;EAEAc,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACb,YAAY,CAACc,YAAY,EAAE;EACzC;EAEAC,OAAOA,CAACT,KAAa,EAAEC,OAAe;IACnC,MAAMF,IAAI,GAAS;MAAEG,EAAE,EAAC,IAAI;MAAEF,KAAK,EAAEA,KAAK;MAAEC,OAAO,EAAEA;IAAO,CAAE;IAC9D,IAAI,CAACT,IAAI,CAACO,IAAI,CAAoB,iCAAiC,EAAEA,IAAI,CAAC,CAACK,SAAS,CAAEM,YAAY,IAAI;MACrGC,OAAO,CAACC,GAAG,CAACF,YAAY,CAACG,OAAO,CAAC;MACjC,IAAI,CAACpB,KAAK,CAACqB,IAAI,CAACf,IAAI,CAAC;MACrB,IAAI,CAACL,YAAY,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACb,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC;EAEL;EAEAsB,UAAUA,CAACC,MAAc;IACvB,IAAI,CAACxB,IAAI,CAACyB,MAAM,CAAC,iCAAiC,GAAGD,MAAM,CAAC,CAC3DZ,SAAS,CAAC,MAAK;MACdO,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACxB,CAAC,CAAC;EACJ;;AA5CWtB,WAAW,C;mBAAXA,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX/B,WAAW,C;SAAXA,WAAW;EAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;EAAAC,UAAA,EAFA;AAAM;SAEjBlC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}