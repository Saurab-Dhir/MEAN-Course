{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PostsService = void 0;\nvar http_1 = require(\"@angular/common/http\");\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\nvar router_1 = require(\"@angular/router\");\nvar i0 = require(\"@angular/core\");\nvar i1 = require(\"@angular/common/http\");\nvar i2 = require(\"@angular/router\");\nvar PostsService = exports.PostsService = /** @class */function () {\n  function PostsService(http, router) {\n    this.http = http;\n    this.router = router;\n    this.posts = [];\n    this.postsUpdated = new rxjs_1.Subject();\n  }\n  PostsService.prototype.getPosts = function () {\n    var _this = this;\n    this.http.get(\"http://localhost:3000/api/posts\").pipe((0, operators_1.map)(function (postData) {\n      return postData.posts.map(function (post) {\n        return {\n          title: post.title,\n          content: post.content,\n          id: post._id\n        };\n      });\n    })).subscribe(function (transformedPosts) {\n      _this.posts = transformedPosts;\n      _this.postsUpdated.next(__spreadArray([], _this.posts, true));\n    });\n  };\n  PostsService.prototype.getPostUpdateListener = function () {\n    return this.postsUpdated.asObservable();\n  };\n  PostsService.prototype.getPost = function (id) {\n    return this.http.get(\"http://localhost:3000/api/posts/\" + id);\n  };\n  PostsService.prototype.addPost = function (title, content) {\n    var _this = this;\n    var post = {\n      id: null,\n      title: title,\n      content: content\n    };\n    this.http.post(\"http://localhost:3000/api/posts\", post).subscribe(function (responseData) {\n      var id = responseData.postId;\n      post.id = id;\n      _this.posts.push(post);\n      _this.postsUpdated.next(__spreadArray([], _this.posts, true));\n      _this.router.navigate([\"/\"]);\n    });\n  };\n  PostsService.prototype.updatePost = function (id, title, content) {\n    var _this = this;\n    var post = {\n      id: id,\n      title: title,\n      content: content\n    };\n    this.http.put(\"http://localhost:3000/api/posts/\" + id, post).subscribe(function (response) {\n      var updatedPosts = __spreadArray([], _this.posts, true);\n      var oldPostIndex = updatedPosts.findIndex(function (p) {\n        return p.id === post.id;\n      });\n      updatedPosts[oldPostIndex] = post;\n      _this.posts = updatedPosts;\n      _this.postsUpdated.next(__spreadArray([], _this.posts, true));\n      _this.router.navigate([\"/\"]);\n    });\n  };\n  PostsService.prototype.deletePost = function (postId) {\n    var _this = this;\n    this.http.delete(\"http://localhost:3000/api/posts/\" + postId).subscribe(function () {\n      var updatedPosts = _this.posts.filter(function (post) {\n        return post.id !== postId;\n      });\n      _this.posts = updatedPosts;\n      _this.postsUpdated.next(__spreadArray([], _this.posts, true));\n    });\n  };\n  PostsService.ɵfac = function PostsService_Factory(t) {\n    return new (t || PostsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  PostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsService,\n    factory: PostsService.ɵfac,\n    providedIn: \"root\"\n  });\n  return PostsService;\n}();","map":{"version":3,"names":["http_1","require","rxjs_1","operators_1","router_1","PostsService","exports","http","router","posts","postsUpdated","Subject","prototype","getPosts","_this","get","pipe","map","postData","post","title","content","id","_id","subscribe","transformedPosts","next","__spreadArray","getPostUpdateListener","asObservable","getPost","addPost","responseData","postId","push","navigate","updatePost","put","response","updatedPosts","oldPostIndex","findIndex","p","deletePost","delete","filter","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Saurab Dhir\\Documents\\Web Dev Udemy Course\\Angular Course\\mean-course\\src\\app\\posts\\posts.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\n\nimport { Post } from \"./post.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class PostsService {\n  private posts: Post[] = [];\n  private postsUpdated = new Subject<Post[]>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getPosts() {\n    this.http\n      .get<{ message: string; posts: any }>(\"http://localhost:3000/api/posts\")\n      .pipe(\n        map(postData => {\n          return postData.posts.map(post => {\n            return {\n              title: post.title,\n              content: post.content,\n              id: post._id\n            };\n          });\n        })\n      )\n      .subscribe(transformedPosts => {\n        this.posts = transformedPosts;\n        this.postsUpdated.next([...this.posts]);\n      });\n  }\n\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n\n  getPost(id: string) {\n    return this.http.get<{ _id: string; title: string; content: string }>(\n      \"http://localhost:3000/api/posts/\" + id\n    );\n  }\n\n  addPost(title: string, content: string) {\n    const post: Post = { id: null, title: title, content: content };\n    this.http\n      .post<{ message: string; postId: string }>(\n        \"http://localhost:3000/api/posts\",\n        post\n      )\n      .subscribe(responseData => {\n        const id = responseData.postId;\n        post.id = id;\n        this.posts.push(post);\n        this.postsUpdated.next([...this.posts]);\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  updatePost(id: string, title: string, content: string) {\n    const post: Post = { id: id, title: title, content: content };\n    this.http\n      .put(\"http://localhost:3000/api/posts/\" + id, post)\n      .subscribe(response => {\n        const updatedPosts = [...this.posts];\n        const oldPostIndex = updatedPosts.findIndex(p => p.id === post.id);\n        updatedPosts[oldPostIndex] = post;\n        this.posts = updatedPosts;\n        this.postsUpdated.next([...this.posts]);\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  deletePost(postId: string) {\n    this.http\n      .delete(\"http://localhost:3000/api/posts/\" + postId)\n      .subscribe(() => {\n        const updatedPosts = this.posts.filter(post => post.id !== postId);\n        this.posts = updatedPosts;\n        this.postsUpdated.next([...this.posts]);\n      });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}