{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass PostsService {\n  constructor(http) {\n    this.http = http;\n    this.posts = [];\n    this.postsUpdated = new Subject();\n  }\n  getPosts() {\n    this.http.get(\"http://localhost:3000/api/posts\").pipe(map(postData => {\n      return postData.posts.map(post => {\n        return {\n          title: post.title,\n          content: post.content,\n          id: post._id\n        };\n      });\n    })).subscribe(transformedPosts => {\n      this.posts = transformedPosts;\n      this.postsUpdated.next([...this.posts]);\n    });\n  }\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n  getPost(id) {\n    return {\n      ...this.posts.find(p => p.id === id)\n    };\n  }\n  addPost(title, content) {\n    const post = {\n      id: null,\n      title: title,\n      content: content\n    };\n    this.http.post(\"http://localhost:3000/api/posts\", post).subscribe(responseData => {\n      const id = responseData.postId;\n      post.id = id;\n      this.posts.push(post);\n      this.postsUpdated.next([...this.posts]);\n    });\n  }\n  updatePost(id, title, content) {\n    const post = {\n      id: id,\n      title: title,\n      content: content\n    };\n    this.http.put(\"http://localhost:3000/api/posts/\" + id, post).subscribe(response => console.log(response));\n  }\n  deletePost(postId) {\n    this.http.delete(\"http://localhost:3000/api/posts/\" + postId).subscribe(() => {\n      const updatedPosts = this.posts.filter(post => post.id !== postId);\n      this.posts = updatedPosts;\n      this.postsUpdated.next([...this.posts]);\n    });\n  }\n}\nPostsService.ɵfac = function PostsService_Factory(t) {\n  return new (t || PostsService)(i0.ɵɵinject(i1.HttpClient));\n};\nPostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostsService,\n  factory: PostsService.ɵfac,\n  providedIn: \"root\"\n});\nexport { PostsService };","map":{"version":3,"names":["Subject","map","PostsService","constructor","http","posts","postsUpdated","getPosts","get","pipe","postData","post","title","content","id","_id","subscribe","transformedPosts","next","getPostUpdateListener","asObservable","getPost","find","p","addPost","responseData","postId","push","updatePost","put","response","console","log","deletePost","delete","updatedPosts","filter","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Saurab Dhir\\Documents\\Web Dev Udemy Course\\Angular Course\\mean-course\\src\\app\\posts\\posts.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nimport { Post } from \"./post.model\";\n\n@Injectable({ providedIn: \"root\" })\nexport class PostsService {\n  private posts: Post[] = [];\n  private postsUpdated = new Subject<Post[]>();\n\n  constructor(private http: HttpClient) {}\n\n  getPosts() {\n    this.http\n      .get<{ message: string; posts: any }>(\"http://localhost:3000/api/posts\")\n      .pipe(\n        map(postData => {\n          return postData.posts.map(post => {\n            return {\n              title: post.title,\n              content: post.content,\n              id: post._id\n            };\n          });\n        })\n      )\n      .subscribe(transformedPosts => {\n        this.posts = transformedPosts;\n        this.postsUpdated.next([...this.posts]);\n      });\n  }\n\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n\n  getPost(id: string) {\n    return { ...this.posts.find(p => p.id === id) };\n  }\n\n  addPost(title: string, content: string) {\n    const post: Post = { id: null, title: title, content: content };\n    this.http\n      .post<{ message: string; postId: string }>(\n        \"http://localhost:3000/api/posts\",\n        post\n      )\n      .subscribe(responseData => {\n        const id = responseData.postId;\n        post.id = id;\n        this.posts.push(post);\n        this.postsUpdated.next([...this.posts]);\n      });\n  }\n\n  updatePost(id: string, title: string, content: string) {\n    const post: Post = { id: id, title: title, content: content };\n    this.http\n      .put(\"http://localhost:3000/api/posts/\" + id, post)\n      .subscribe(response => console.log(response));\n  }\n\n  deletePost(postId: string) {\n    this.http\n      .delete(\"http://localhost:3000/api/posts/\" + postId)\n      .subscribe(() => {\n        const updatedPosts = this.posts.filter(post => post.id !== postId);\n        this.posts = updatedPosts;\n        this.postsUpdated.next([...this.posts]);\n      });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}